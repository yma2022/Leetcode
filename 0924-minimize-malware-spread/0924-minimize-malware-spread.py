class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def find(u):
            if u == parent[u]:
                return u
            parent[u] = find(parent[u])
            return parent[u]
        
        def join(u, v):
            u = find(u)
            v = find(v)
            if u == v:
                return
            if rank[u] > rank[v]:
                parent[v] = u
            elif rank[u] < rank[v]:
                parent[u] = v
            else:
                parent[v] = u
                rank[u] += rank[v]
                
        parent = [i for i in range(len(graph))]
        rank = [1 for _ in range(len(graph))]
        
        for i in range(len(graph)):
            for j in range(len(graph[0])):
                if graph[i][j] == 1:
                    if find(i) != find(j):
                        join(i, j)
        
        count = collections.Counter(find(u) for u in initial)
        ans = (-1, min(initial))
        area = collections.Counter(find(i) for i in range(len(graph)))
        print(count, area)

        return min(initial, key=lambda i: [(count[find(i)] == 1) * -area[find(i)], i])
